// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Cars")]
    public partial class CarsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MultipleExamples.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cars", "In order to ensure road safety\r\nAs a driver\r\nI want to be certain all tires will " +
                    "work", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check tire and engine combinations")]
        [NUnit.Framework.CategoryAttribute("examples")]
        [NUnit.Framework.TestCaseAttribute("50", "28", "19.2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("100", "99", "18", new string[0])]
        [NUnit.Framework.TestCaseAttribute("45", "38", "23", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "43", "12", new string[0])]
        public virtual void CheckTireAndEngineCombinations(string speed, string grip, string mileage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "examples"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check tire and engine combinations", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "transmission"});
            table1.AddRow(new string[] {
                        "manual"});
            table1.AddRow(new string[] {
                        "automatic"});
#line 8
 testRunner.Given("I am driving a car with a transmission of type:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "engine"});
            table2.AddRow(new string[] {
                        "500cc"});
            table2.AddRow(new string[] {
                        "1000cc"});
            table2.AddRow(new string[] {
                        "1200cc"});
#line 12
 testRunner.And("I have an engine of size:", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "tread"});
            table3.AddRow(new string[] {
                        "winter"});
            table3.AddRow(new string[] {
                        "summer"});
#line 17
 testRunner.When("I press put on these tires:", ((string)(null)), table3);
#line 21
 testRunner.Then(string.Format("the max speed should be {0}, the grip should be {1}, and mileage should be less t" +
                        "han {2}", speed, grip, mileage));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
